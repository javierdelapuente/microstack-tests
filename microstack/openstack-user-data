#cloud-config
# https://microstack.run/docs/single-node

package_update: true
fqdn: openstack.delapuente.es
manage_etc_hosts: localhost
packages:
- jq
- retry

snap:
  commands:
   - snap install openstack --channel 2024.1/${RISK}
   - snap install yq

write_files:
  - path: /tmp/openstack-manifest-deployment
    permissions: "0644"
    # see in https://canonical.com/microstack/docs/manifest-reference
    # or /snap/openstack/current/lib/python3.12/site-packages/sunbeam/core/manifest.py
    # or https://github.com/canonical/snap-openstack
    content: |
             core:
               config:
                 proxy:
                   proxy_required: false
                 bootstrap:
                   management_cidr: 192.168.20.0/24
                 region: RegionOne
                 k8s-addons:
                   loadbalancer: 192.168.20.10-192.168.20.29
                 addons:
                   metallb: 192.168.20.10-192.168.20.29
                 external_network:
                   nic: ${EXTERNAL_IFNAME}
                   cidr: 192.168.20.0/24
                   gateway: 192.168.20.1
                   range: 192.168.20.30-192.168.20.69
                   network_type: flat
                 user:
                   remote_access_location: remote
                   run_demo_setup: true
                   username: demo
                   password: demo
                   cidr: 192.168.122.0/24
                   nameservers: 8.8.8.8
                   security_group_rules: true
                 microceph_config:
                   openstack.delapuente.es:
                     osd_devices: /dev/sdb
               software:
                 charms:
                   glance-k8s:
                     storage:
                       local-repository: "25G"
                     config:
                       image-size-cap: 10G

users:
  - default
  - name: ubuntu
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBFgYNZOrHQWgirA7Ccdy+T7hWxLWKHCSCO0Imc3xbyr jpuente@thinkpad
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMFKI1Vo3YbhW2oB0pyJvdqgm22Epu299UeHw2EoopYb jpuente@thinkpadpersonal
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG5oXzCEbfWreZjbsta69lZFYo5Z8LmzqG5q6DR69sy+ jpuente@big.delapuente.es

runcmd:
  - |
    # Install openstack
    sudo -i -u ubuntu bash <<'EOF'
      set -euo pipefail
      set -x
      cd "${HOME}"
      export EXTERNAL_IFNAME="$(ip --json a | jq '.[] | select(.address == "00:14:4f:f8:00:02")' | jq -r '.ifname')"
      cat /tmp/openstack-manifest-deployment | envsubst '$EXTERNAL_IFNAME' > openstack-manifest-deployment
      cp /snap/openstack/current/etc/manifests/${RISK}.yml .
      yq eval-all '. as $item ireduce ({}; . * $item)' ./${RISK}.yml ./openstack-manifest-deployment > combined-openstack-manifest

      sunbeam prepare-node-script --bootstrap | bash -x
    EOF
  - systemctl start user@1000
  - |
    # New shell to get groups 
    sudo -i -u ubuntu bash <<'EOF'
      set -euo pipefail
      set -x
      # grrr. without this it fails
      export XDG_RUNTIME_DIR=/run/user/1000
      export DBUS_SESSION_BUS_ADDRESS="unix:path=$XDG_RUNTIME_DIR/bus"
      cd "${HOME}"

      # storage requires ceph
      if ${ENABLE_CEPH}
      then
        cat combined-openstack-manifest > openstack-manifest
        sunbeam cluster bootstrap --role control,compute,storage -m openstack-manifest || :
      else
        cat combined-openstack-manifest | yq 'del(.core.config.microceph_config)' > openstack-manifest
        sunbeam cluster bootstrap -m openstack-manifest --role control,compute
      fi

      sunbeam configure -m openstack-manifest --openrc demo-openrc

      . <(sunbeam openrc)
      # This is to be able to attach directly instances to the external network.
      openstack network set --share external-network
      openstack subnet set --dns-nameserver 8.8.8.8 --dhcp external-subnet
      #openstack flavor create --public m1.builder --ram 1024 --disk 20 --vcpus 2 --public

      sunbeam enable vault

      # VAULT
      sunbeam vault init 1 1 --format json > ~/vaultcreds.json
      # TODO this should be done on reboot again
      jq -r '.unseal_keys_hex.[0]' ~/vaultcreds.json | sunbeam vault unseal -
      jq -r '.root_token' ~/vaultcreds.json | sunbeam vault authorize-charm -

      juju switch openstack
      juju deploy traefik-k8s traefik-vault --channel latest/beta --trust
      juju deploy self-signed-certificates certificates-vault --channel latest/beta
      juju integrate certificates-vault:certificates traefik-vault:certificates
      juju integrate vault:send-ca-cert traefik-vault:receive-ca-cert
      juju integrate vault:ingress traefik-vault:ingress

      juju wait-for application certificates-vault
      juju wait-for application traefik-vault
      juju wait-for application vault

      
      SECRET_ID_CA_CERTIFICATE_VAULT=$(juju secrets --format=json | jq -r 'to_entries | .[] | select(.value.owner == "certificates-vault").key')
      juju show-secret ${SECRET_ID_CA_CERTIFICATE_VAULT} --reveal --format json | jq -r 'to_entries.[].value.content.Data."ca-certificate"' > ~/vault_ca.pem

      # to get vault url:
      # juju run traefik-vault/0 show-proxied-endpoints --format json | jq -r '.\"traefik-vault/0\".results.\"proxied-endpoints\"' | jq -r '.\"vault\".url'"
      # to get vault token:
      # jq -r '.root_token' ~/vaultcreds.json

      # For Telemetrh: ceph is required to install telemetry
      # sunbeam enable telemetry
      sunbeam enable images-sync
      sunbeam enable loadbalancer
    EOF
